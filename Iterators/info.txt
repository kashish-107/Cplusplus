------------------------- Iterators ----------------------
- An iterator is an object (like a pointer) that points to an element inside the container
- An iterator can either be a constant or a non-constant/regular iterator.
- Types of iterators:
	1. Input
	2. Output
	3. Forward
	4. Bi-directional
	5. Random-access
- Benefits:
	1. Convenience in programming
	2. Code reusability - [] not supported by list
	3. Dynamic processing of the container - If we want to element in midway
- Operations of iterators:
	1. begin()
	2. end()
	3. advance()-  increment the iterator position till the specified number mentioned in its arguments
	4. next()- return a new iterator that the iterator would point after advancing the positions mentioned in its arguments.
	5. prev()- return a new iterator that the iterator would point after decrementing the positions mentioned in its arguments.
	6. inserter()
- Difference b/w iterator and pointer 
	1. Pointer: Perform simple arithmetic like increment, decrement, add an integer etc.
	   Iterator: Not all iterators allow these operations		
	2. Pointer: type T* can point to any type T object.
	   Iterator: An iterator is more restricted, e.g., a vector::iterator can only refer to doubles that are inside a vector container.
	3. Pointer: can delete a pointer using delete
	   Iterator: Since an iterator refers to objects in a container, unlike pointers, thereâ€™s no concept of delete for an iterator. 
			(The container is responsible for memory management.) 
